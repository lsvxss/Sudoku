1) Класс Sudoku(наследуется от QMainWindow)
При инициализации отображает главное окно программы, получает в аргументах id пользователя, его имя, а также обрабатывает все события происходящие в главном окне (нажатие кнопок и взаимодействие с меню).
- Метод back_dialog (подключается при нажатии пользователем пользователем на кнопку "Назад")
В нем идет возврат с главного окна к начальному диалоговому окну
- Метод light_level (подключается при выборе (нажатии на кнопку) пользователем легкого уровня игры)
В нем идет подключение к ui-файлу game.ui игры, QLineEdit'ы (то есть сами клетки игры) заполняются заданными в словаре значениями
- Метод middle_level (подключается при выборе (нажатии на кнопку) пользователем среднего уровня игры)
В нем идет подключение к ui-файлу game.ui игры, QLineEdit'ы (то есть сами клетки игры) заполняются заданными в словаре значениями
- Метод high_level (подключается при выборе (нажатии на кнопку) пользователем сложного уровня игры)
В нем идет подключение к ui-файлу game.ui игры, QLineEdit'ы (то есть сами клетки игры) заполняются заданными в словаре значениями
- Метод check (подключается при нажатии пользователем на кнопку "Проверить" в окне игры)
В нем идет проверка верного выполнения игры - проверяются столбцы, строки и квадраты игрового поля. При неверном заполнении клеток в label помещается сообщение об ошибке.
- Метод add_points(подключается в методе check при правильном решении игры)
В нем происходит подключение к базе данных accounts и взятие из таблицы points значения очков пользователя по его id. При правильном решении судоку легкого уровня к уже имеющимся очкам пользователя начисляется 25 очков, среднего - 50 очков, а сложного - 75 очков.
- Метод use_hint(подключается при нажатии пользователем на кнопку "Подсказка" в окне игры)
В нем происходит помещение дополнительных чисел в клетки на поле игры, в зависимости от выбранного уровня игры, что упрощает решение самой игры.
- Метод back
В нем происходит возврат пользователя к главному окну при нажатии кнопки "Назад" в окне игры.
- Метод info
В нем происходит подключение к классу Info при выполнении действий в меню
- Метод show_my_progress
В нем происходит подключение к классу Progress при выполнении действий в меню

2)Класс Info(наследуется от QMainWindow)
При инициализации отображает окно со справкой к программе, получает в аргументах id пользователя и его имя.
- Метод back(вызывается при нажатии пользователем кнопки "OK" в окне справки)
В нем происходит возврат пользователя к главному классу Sudoku.

3)Класс Progress(наследуется от QMainWindow)
При инициализации отображает окно с информацией о личном прогрессе пользователя, получает в аргументах id пользователя и его имя, в label помещается текст с приветствием пользователя по имени и строка с количеством очков у пользователя в текущий момент времени.
- Метод back(вызывается при нажатии пользователем кнопки "OK" в окне с информацией о прогрессе)
В нем происходит возврат пользователя к главному классу Sudoku.

4)Класс Dialog(наследуется от QDialog)
При инициализации подключает базу данных accounts и отображает окно с двумя кнопками "Да" и "Нет". При положительном ответе идет вызов метода check_info и подключение к ui-файлу dialog_2.ui с окном для входа, при отрицательном ответе вызывается метод insert_in_table и вызывается ui-файл dialog.ui с формой для регистрации.
- Метод back (подключается при нажатии пользователем пользователем на кнопку "Cancel")
В нем идет возврат с главного окна к начальному диалоговому окну
- Метод check_info
В нем происходит проверка по базе данных введенных пользователем строк в QLineEdit. При успешной проверке происходит переход к классу Sudoku(то есть к главному окну)
- Метод insert_in_table
В нем происходит внесение введенных пользователем данных в окне для регистрации в таблицу users базы данных accounts, внесение в таблицу users уникального id, генерируемого программой случайно с помощью библиотеки random, внесение в таблицу points данных о пользователе(id, имя и количество очков(начальное значение очков равно 0) и происходит переход к классу Sudoku(то есть к главному окну).
Программа продолжает работать до тех пор, пока все открытые окна программы не закрыты.